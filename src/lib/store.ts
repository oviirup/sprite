import { Icon, IconRecord, SpriteRecord } from '@/types';
import { kebabCase } from '@/utils/helpers';
import { SpriteError } from '@/utils/logger';
import { parse } from 'node-html-parser';
import { zIcon, zSpriteRecord } from './schema';

export class SpriteStore {
  readonly name: string;
  readonly prefix: string;
  readonly icons: IconRecord;

  protected _sprite: string | null = null;
  protected _typedef: string | null = null;

  constructor(record: SpriteRecord) {
    const parsedRecord = zSpriteRecord.safeParse(record);
    if (!parsedRecord.success) {
      throw new SpriteError(parsedRecord.error.errors.map((e) => e.message).join(', '));
    }
    this.name = record.name;
    this.prefix = record.prefix?.trim() || '';
    this.icons = record.icons;
  }

  /**
   * Retrieves an icon by its name.
   *
   * @param name - The name of the icon to retrieve.
   * @returns The icon object or undefined if not found.
   */
  get(name: string): Icon | null {
    return name in this.icons ? this.icons[name] : null;
  }

  /**
   * Adds or updates an icon by its name.
   *
   * @param name - The name of the icon.
   * @param icon - The icon object to set.
   * @returns The index of the Icon that is added or modified
   */
  set(name: string, icon: Icon): Icon {
    const parsedIcon = zIcon.safeParse(icon);
    if (parsedIcon.error) {
      throw new SpriteError(parsedIcon.error.errors[0].message);
    }
    this.icons[name] = parsedIcon.data;
    return parsedIcon.data;
  }

  /**
   * Deletes an icon by its name.
   *
   * @param name - The name of the icon to delete.
   * @returns True if the icon was deleted, false if it didn't exist.
   */
  delete(name: string): boolean {
    if (name in this.icons) {
      // @ts-ignore
      this.icons[name] = undefined;
      delete this.icons[name];
      return true;
    }
    return false;
  }

  /** Generates raw svg sprite sheet */
  toSprite() {
    if (this._sprite !== null) {
      return this._sprite;
    }

    const symbols = Object.keys(this.icons).map((iconName) => {
      const { content, attributes = {} } = this.icons[iconName];
      const xml = parse('<symbol/>');
      const symbol = xml.querySelector('symbol')!;
      const id = this.prefix + kebabCase(iconName);
      symbol.setAttributes({ id, ...attributes });
      symbol.innerHTML = content;
      return `  ${symbol.toString()}`;
    });
    const content = [
      '<?xml version="1.0" encoding="utf-8"?>',
      '<!-- This file is generated by @oviirup/sprite -->',
      '<svg xmlns="http://www.w3.org/2000/svg">',
      ...symbols,
      '</svg>',
    ].join('\n');

    return content;
  }

  protected clearInternalCache() {
    this._sprite = null;
    this._typedef = null;
  }
}
